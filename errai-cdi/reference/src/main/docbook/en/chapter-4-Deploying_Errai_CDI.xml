<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5931501">
    
    <title>Deploying Errai CDI</title>
    <para>
      If you do not care about the deployment details for now and just want to get started take a look at the
      <ulink url="https://docs.jboss.org/author/pages/viewpage.action?pageId=5931395">CDI Quickstart Guide</ulink>
      .
    </para>
    <para>The CDI integration is a plugin to the Errai core framework and represents a CDI portable extension. Which means it is discovered automatically by both Errai and the CDI container. In order to use it, you first need to understand the different runtime models involved when working GWT, Errai and CDI.</para>
    <para>
      Typically a GWT application lifecycle begins in
      <ulink url="http://code.google.com/webtoolkit/doc/latest/DevGuideCompilingAndDebugging.html">Development Mode</ulink>
      and finally a web application containing the GWT client code will be deployed to a target container (Servlet Engine, Application Server). This is no way different when working with CDI components to back your application.
    </para>
    <para>What's different however is availability of the CDI container across the different runtimes. In GWT development mode and in a pure servlet environment you need to provide and bootstrap the CDI environment on your own. While any Java EE 6 Application Server already provides a preconfigured CDI container. To accomodate these differences, we need to do a little trickery when executing the GWT Development Mode and packaging our application for deployment.</para>
    <section id="sid-5931501_DeployingErraiCDI-DeploymentinDevelopmentMode">
      
      <title>Deployment in Development Mode</title>
      <para>In development mode we need to bootstrap the CDI environment on our own and make both Errai and CDI available through JNDI (common denominator across all runtimes). Since GWT uses Jetty, that only supports read only JNDI, we need to replace the default Jetty launcher with a custom one that will setup the JNDI bindings:</para>
      <informalexample>
        <programlisting>&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;gwt-maven plugin&lt;/artifactId&gt;
  &lt;version&gt;${gwt.maven}&lt;/version&gt;

  &lt;configuration&gt;
  ...
    &lt;server&gt;org.jboss.errai.cdi.server.gwt.JettyLauncher&lt;/server&gt;
  &lt;/configuration&gt;
  &lt;executions&gt;
  ...
  &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
      </informalexample>
      <note>
        <title>Starting Development Mode from within your IDE</title>
        <para>Consequently, when starting Development Mode from within your IDE the following program argument has to be provided: -server org.jboss.errai.cdi.server.gwt.JettyLauncher</para>
      </note>
      <para>Once this is set up correctly, we can bootstrap the CDI container through a servlet listener:</para>
      <informalexample>
        <programlisting>&lt;web-app&gt;
  ...
  &lt;listener&gt;
    &lt;listener-class&gt;org.jboss.errai.container.DevModeCDIBootstrap&lt;/listener-class&gt;
  &lt;/listener&gt;
Â 
  &lt;resource-env-ref&gt;
    &lt;description&gt;Object factory for the CDI Bean Manager&lt;/description&gt;
    &lt;resource-env-ref-name&gt;BeanManager&lt;/resource-env-ref-name&gt;
    &lt;resource-env-ref-type&gt;javax.enterprise.inject.spi.BeanManager&lt;/resource-env-ref-type&gt;
  &lt;/resource-env-ref&gt;
  ...
&lt;/web-app&gt;</programlisting>
      </informalexample>
      <note>
        <title>Errai-CDI maven archetype</title>
        <para>
          Sounds terribly complicated, no? Don't worry we provide a
          <ulink url="https://docs.jboss.org/author/pages/viewpage.action?pageId=5931395">maven archetype</ulink>
          that takes care of all these setup steps and configuration details.
        </para>
      </note>
    </section>
    <section id="sid-5931501_DeployingErraiCDI-DeploymenttoaServletEngine">
      
      <title>Deployment to a Servlet Engine</title>
      <para>
        Deployment to servlet engine has basically the same requirements as running in development mode. You need to include the servlet listener that bootstraps the CDI container and make sure both Errai and CDI are accessible through JNDI. For Jetty you can re-use the artefacts we ship with the archetype. In case you want to run on tomcat, please consult the
        <ulink url="http://tomcat.apache.org/tomcat-5.5-doc/jndi-resources-howto.html">Apache Tomcat Documentation</ulink>
        .
      </para>
    </section>
    <section id="sid-5931501_DeployingErraiCDI-DeploymenttoanApplicationServer">
      
      <title>Deployment to an Application Server</title>
      <para>
        We provide integration with the
        <ulink url="http://jboss.org/jbossas">JBoss Application Server</ulink>
        , but the requirements are basically the same for other vendors. When running a GWT client app that leverages CDI beans on a Java EE 6 application server, CDI is already part of the container and accessible through JNDI (
        <code>java:/BeanManager</code>
        ).
      </para>
    </section>
    <section id="sid-5931501_DeployingErraiCDI-ConfigurationOptions">
      
      <title>Configuration Options</title>
      <para>
        Since the discovery of service implementations (beans) is delegated to the CDI container, we need to disable Errai's own service discovery mechanism. In order to do so, simply turn off the auto-discovery feature in
        <code>ErraiService.properties</code>
      </para>
      <informalexample>
        <programlisting>errai.auto_discover_services=false</programlisting>
      </informalexample>
    </section>
  </chapter>
